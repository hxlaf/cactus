{
  "openapi": "3.0.3",
  "info": {
    "title": "Hyperledger Cactus Plugin - Connector Iroha",
    "description": "Can perform basic tasks on a Iroha ledger",
    "version": "0.0.1",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "https://www.cactus.stream/{basePath}",
      "description": "Public test instance",
      "variables": {
        "basePath": {
          "default": ""
        }
      }
    },
    {
      "url": "http://localhost:4000/{basePath}",
      "description": "Local test instance",
      "variables": {
        "basePath": {
          "default": ""
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "RunTransactionRequest": {
        "type": "object",
        "required": ["commandName", "params"],
        "properties": {
          "commandName": {
            "type": "string",
            "nullable": false
          },
          "params": {
            "description": "The list of arguments to pass in to the trasnsaction request.",
            "type": "array",
            "default": [],
            "items": {}
          }
        }
      },
      "RunTransactionResponse": {
        "type": "object",
        "required": ["transactionReceipt"],
        "properties": {
          "transactionReceipt": {}
        }
      },
      "InvokeContractV1Request": {
        "type": "object",
        "required": [
          "contractName",
          "signingCredential",
          "invocationType",
          "methodName",
          "params"
        ],
        "properties": {
          "contractName": {},
          "signingCredential": {},
          "invocationType": {},
          "methodName": {
            "description": "The name of the contract method to invoke.",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "maxLength": 2048
          },
          "params": {
            "description": "The list of arguments to pass in to the contract method being invoked.",
            "type": "array",
            "default": [],
            "items": {}
          },
          "contractAbi": {
            "description": "The application binary interface of the solidity contract, optional parameter",
            "type": "array",
            "items": {},
            "nullable": false
          },
          "contractAddress": {
            "description": "Address of the solidity contract, optional parameter",
            "type": "string",
            "nullable": false
          },
          "value": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "gas": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "gasPrice": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "nonce": {
            "type": "number"
          },
          "timeoutMs": {
            "type": "number",
            "description": "The amount of milliseconds to wait for a transaction receipt beforegiving up and crashing. Only has any effect if the invocation type is SEND",
            "minimum": 0,
            "default": 60000,
            "nullable": false
          },
          "keychainId": {
            "type": "string",
            "description": "The keychainId for retrieve the contracts json.",
            "minLength": 1,
            "maxLength": 100
          }
        }
      },
      "InvokeContractV1Response": {
        "type": "object",
        "required": ["success"],
        "properties": {}
      },
      "PrometheusExporterMetricsResponse": {
        "type": "string",
        "nullable": false
      },
      "getAssetInfoResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "domainId": {
            "type": "string"
          },
          "precision": {
            "type": "number"
          }
        }
      },
      "IrohaSuccessResponse": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "example": "5a33387b7e0cfe4b2d79fdc9bbba61a235a268eef211a73a282b9ce30ac06e28"
          },
          "status": {
            "type": "string",
            "example": "COMMITTED"
          }
        }
      },
      "IrohaErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Command response error: expected=COMMITTED, actual=REJECTED"
          },
          "status": {
            "type": "string",
            "example": "REJECTED"
          }
        }
      },
      "IrohaAuthErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Invalid. Iroha key and/or account id is missing."
          },
          "status": {
            "type": "string",
            "example": "REJECTED"
          }
        }
      },
      "InvalidResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  },
  "paths": {
    "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-iroha/run-transaction": {
      "post": {
        "x-hyperledger-cactus": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-iroha/run-transaction"
          }
        },
        "operationId": "runTransactionV1",
        "summary": "Executes a transaction on a Iroha ledger",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-iroha/invoke-contract": {
      "post": {
        "x-hyperledger-cactus": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-iroha/invoke-contract"
          }
        },
        "operationId": "invokeContractV1",
        "summary": "Invokes a contract on a Iroha ledger",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvokeContractV1Request"
              }
            }
          }
        },
        "responses": {
          "501": {
            "description": "Not implemented",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "nullable": false,
                      "minLength": 1,
                      "maxLength": 2048
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-iroha/get-prometheus-exporter-metrics": {
      "get": {
        "x-hyperledger-cactus": {
          "http": {
            "verbLowerCase": "get",
            "path": "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-iroha/get-prometheus-exporter-metrics"
          }
        },
        "operationId": "getPrometheusExporterMetricsV1",
        "summary": "Get the Prometheus Metrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PrometheusExporterMetricsResponse"
                }
              }
            }
          }
        }
      }
    }
  }
}
